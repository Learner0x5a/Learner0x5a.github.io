<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learner0x5a&#39;s Studio</title>
  
  
  <link href="https://learner0x5a.github.io/atom.xml" rel="self"/>
  
  <link href="https://learner0x5a.github.io/"/>
  <updated>2023-03-21T12:17:57.228Z</updated>
  <id>https://learner0x5a.github.io/</id>
  
  <author>
    <name>Learner0x5a</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pytorch-Lightning Debug</title>
    <link href="https://learner0x5a.github.io/2023/03/21/pytorchlightningnote/"/>
    <id>https://learner0x5a.github.io/2023/03/21/pytorchlightningnote/</id>
    <published>2023-03-21T12:14:38.000Z</published>
    <updated>2023-03-21T12:17:57.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pytorch-Lightning-bug-note"><a href="#Pytorch-Lightning-bug-note" class="headerlink" title="Pytorch Lightning bug note"></a>Pytorch Lightning bug note</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误: 在docker里面一旦开启多GPU就报bus error，其他什么信息都没有。</span><br><span class="line">原因: docker container默认的share memory太小</span><br><span class="line">解决方案: 在起docker的时候增大shm，或者直接指定--ipc&#x3D;host</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pytorch-Lightning-bug-note&quot;&gt;&lt;a href=&quot;#Pytorch-Lightning-bug-note&quot; class=&quot;headerlink&quot; title=&quot;Pytorch Lightning bug note&quot;&gt;&lt;/a&gt;Pytorch </summary>
      
    
    
    
    
    <category term="AI" scheme="https://learner0x5a.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>BinaryNinja笔记</title>
    <link href="https://learner0x5a.github.io/2022/08/28/binaryninjanote/"/>
    <id>https://learner0x5a.github.io/2022/08/28/binaryninjanote/</id>
    <published>2022-08-28T07:38:07.000Z</published>
    <updated>2022-08-28T07:49:14.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MLIL"><a href="#MLIL" class="headerlink" title="MLIL"></a>MLIL</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前函数的第22条mlil</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst = current_mlil[<span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># mlil指令</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst</span><br><span class="line">&lt;mlil: [rax_1 + <span class="number">8</span>].q(rdi_1)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指令类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.operation</span><br><span class="line">&lt;MediumLevelILOperation.MLIL_CALL: <span class="number">51</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.params</span><br><span class="line">[&lt;mlil: rdi_1&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令的目标</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.dest</span><br><span class="line">&lt;mlil: [rax_1 + <span class="number">8</span>].q&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令目标值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.dest.value</span><br><span class="line">&lt;undetermined&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令目标的类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.dest.operation</span><br><span class="line">&lt;MediumLevelILOperation.MLIL_LOAD: <span class="number">4</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令的第一个参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inst.params[<span class="number">0</span>]</span><br><span class="line">&lt;mlil: rdi_1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(inst.params[<span class="number">0</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">binaryninja</span>.<span class="title">mediumlevelil</span>.<span class="title">MediumLevelILVar</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; para1 = inst.params[0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CALL指令参数的操作数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>para1.operands</span><br><span class="line">[&lt;var void* rdi_1&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>para1.operands[<span class="number">0</span>]</span><br><span class="line">&lt;var void* rdi_1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(para1.operands[<span class="number">0</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">binaryninja</span>.<span class="title">variable</span>.<span class="title">Variable</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">para1</span>.<span class="title">operands</span>[0].<span class="title">function</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">func</span>:</span> x86_64@<span class="number">0x1ad6b</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>para1.operands[<span class="number">0</span>].function.mlil</span><br><span class="line">&lt;mlil func: x86_64@<span class="number">0x1ad6b</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ml = para1.operands[<span class="number">0</span>].function.mlil</span><br><span class="line"><span class="comment"># 获取use</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ml.get_var_uses(para1.operands[<span class="number">0</span>])</span><br><span class="line">[&lt;mlil: <span class="keyword">if</span> (rdi_1 == <span class="number">0</span>) then <span class="number">19</span> @ <span class="number">0x1ada4</span> <span class="keyword">else</span> <span class="number">21</span> @ <span class="number">0x1ad9d</span>&gt;, &lt;mlil: rax_1 = [rdi_1 + <span class="number">0x10</span>].q&gt;, &lt;mlil: [rax_1 + <span class="number">8</span>].q(rdi_1)&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取def</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ml.get_var_definitions(para1.operands[<span class="number">0</span>])</span><br><span class="line">[&lt;mlil: rdi_1 = [r12 + (rbp &lt;&lt; <span class="number">3</span>)].q&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ml.get_var_definitions(para1.operands[<span class="number">0</span>])[<span class="number">0</span>]</span><br><span class="line">&lt;mlil: rdi_1 = [r12 + (rbp &lt;&lt; <span class="number">3</span>)].q&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作为def的mlil指令的地址，该地址和assembly是对应的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(ml.get_var_definitions(para1.operands[<span class="number">0</span>])[<span class="number">0</span>].address)</span><br><span class="line"><span class="string">&#x27;0x1ad94&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>根据<a href="https://docs.binary.ninja/dev/bnil-overview.html">官方文档</a>的说法，从assembly到low-level il做了常量传播、tail-call等分析，</p><p>从low-level il到medium-level il做了VSA、类型推断、函数参数解析等，</p><p>这些分析怎么实现的？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MLIL&quot;&gt;&lt;a href=&quot;#MLIL&quot; class=&quot;headerlink&quot; title=&quot;MLIL&quot;&gt;&lt;/a&gt;MLIL&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>binaryninja-linux</title>
    <link href="https://learner0x5a.github.io/2022/08/28/binaryninja-linux/"/>
    <id>https://learner0x5a.github.io/2022/08/28/binaryninja-linux/</id>
    <published>2022-08-27T16:04:32.000Z</published>
    <updated>2022-08-27T16:22:16.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BinaryNinja-Linux安装"><a href="#BinaryNinja-Linux安装" class="headerlink" title="BinaryNinja Linux安装"></a>BinaryNinja Linux安装</h1><p>在一个没有图形界面的Linux里，如果直接按照官方文档的说明安装python api，在调用时会报错“License not valid”。</p><p>解决方案：把license文件放到<code>~/.binaryninja/</code>目录下，且命名为<code>license.dat</code>。</p><p>Note: 需要<code>apt install libdbus-1-3 libgel1</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BinaryNinja-Linux安装&quot;&gt;&lt;a href=&quot;#BinaryNinja-Linux安装&quot; class=&quot;headerlink&quot; title=&quot;BinaryNinja Linux安装&quot;&gt;&lt;/a&gt;BinaryNinja Linux安装&lt;/h1&gt;&lt;p&gt;在一</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>vscode 有关bug</title>
    <link href="https://learner0x5a.github.io/2022/08/27/VSCodeIssues/"/>
    <id>https://learner0x5a.github.io/2022/08/27/VSCodeIssues/</id>
    <published>2022-08-27T15:56:03.000Z</published>
    <updated>2022-08-27T16:08:16.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Python调试器不起效"><a href="#1-Python调试器不起效" class="headerlink" title="1. Python调试器不起效"></a>1. Python调试器不起效</h1><p>按F5，或者通过菜单启动调试，均无反应。</p><p>解决方案：降级python插件。在应用商店的插件页面，已安装的插件的“卸载”按钮旁边的箭头，下拉菜单中选择其他版本安装，降级至2021年的最后一个版本。</p><h1 id="2-remote-ssh一直超时"><a href="#2-remote-ssh一直超时" class="headerlink" title="2. remote ssh一直超时"></a>2. remote ssh一直超时</h1><p>除了网络原因之外，如果目标服务器ip不变但ssh key变了，也会出现这种情况。</p><p>解决方案：删掉known_hosts里面的目标服务器条目；然后在vscode <code>Remote-SSH:Settings</code> (Ctrl-Shift-P) 里面，取消勾选<code>Use Local Server</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Python调试器不起效&quot;&gt;&lt;a href=&quot;#1-Python调试器不起效&quot; class=&quot;headerlink&quot; title=&quot;1. Python调试器不起效&quot;&gt;&lt;/a&gt;1. Python调试器不起效&lt;/h1&gt;&lt;p&gt;按F5，或者通过菜单启动调试，均无反应。</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>给BERT添加额外的输入/特征/嵌入</title>
    <link href="https://learner0x5a.github.io/2022/06/09/AddtionalBertEmebdding/"/>
    <id>https://learner0x5a.github.io/2022/06/09/AddtionalBertEmebdding/</id>
    <published>2022-06-09T13:48:40.000Z</published>
    <updated>2022-06-09T14:01:32.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给BERT添加额外的输入-特征-嵌入"><a href="#给BERT添加额外的输入-特征-嵌入" class="headerlink" title="给BERT添加额外的输入/特征/嵌入"></a>给BERT添加额外的输入/特征/嵌入</h1><p><a href="https://discuss.huggingface.co/t/can-we-add-extra-word-embedding-to-the-bert/14951">Can we add extra word embedding to the BERT?</a></p><p><a href="https://discuss.huggingface.co/t/how-to-use-additional-input-features-for-ner/4364/2">How to use additional input features for NER?</a></p><h1 id="相关讨论"><a href="#相关讨论" class="headerlink" title="相关讨论"></a>相关讨论</h1><p><a href="https://www.zhihu.com/question/470540809">BERT在输入层如何引入额外特征?</a></p><p><a href="https://www.zhihu.com/question/374835153">为什么Bert的三个Embedding可以进行相加?</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;给BERT添加额外的输入-特征-嵌入&quot;&gt;&lt;a href=&quot;#给BERT添加额外的输入-特征-嵌入&quot; class=&quot;headerlink&quot; title=&quot;给BERT添加额外的输入/特征/嵌入&quot;&gt;&lt;/a&gt;给BERT添加额外的输入/特征/嵌入&lt;/h1&gt;&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="AI" scheme="https://learner0x5a.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>中国社会之史的分析</title>
    <link href="https://learner0x5a.github.io/2022/04/01/HistoryOfChineseSociety/"/>
    <id>https://learner0x5a.github.io/2022/04/01/HistoryOfChineseSociety/</id>
    <published>2022-04-01T07:24:08.000Z</published>
    <updated>2022-06-09T14:04:39.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中国社会之史的分析（外一种：婚姻与家族）"><a href="#中国社会之史的分析（外一种：婚姻与家族）" class="headerlink" title="中国社会之史的分析（外一种：婚姻与家族）"></a>中国社会之史的分析（外一种：婚姻与家族）</h1><h2 id="成书背景：中国社会史论战"><a href="#成书背景：中国社会史论战" class="headerlink" title="成书背景：中国社会史论战"></a>成书背景：中国社会史论战</h2><p>本书是陶希圣在1928～1937年中国社会史论战中的著作。五四运动之后，马克思主义、唯物史观在中国迅速流行开来；</p><p>1927年，国共第一次合作破裂后，中共于1928年7月在莫斯科召开第六次全国代表大会，讨论解决中国社会的性质、中国共产党的革命性质、革命形势、革命任务等问题。</p><p>大会决议认为当时的中国社会性质是半殖民地半封建社会，中国革命的性质是资产阶级民主革命，根本任务是反帝反封建。</p><p>1928年10月，陶希圣发表《中国社会到底是什么社会》，被认为是中国社会史论战的起点，由此开始，中共、托派、国民党左派开始了关于中国社会史的论战。</p><p>虽然参与论战的各方人士政治立场各不相同甚至截然相反，但大都以马克思主义唯物史观作为理论依据；</p><p>社会史论战让历史学者强烈地感受到历史学并非单纯的书斋里的学问，而是与国家、民族、人民命运息息相关，并加深了对中国社会性质的认识。</p><p>论战并无结果，并于1937年抗日战争爆发后基本结束，而后则由历史的进程对此论战进行回顾和总结。</p><h2 id="阅读动机"><a href="#阅读动机" class="headerlink" title="阅读动机"></a>阅读动机</h2><p>最近经历的一些事情令我愈发感觉中国社会的混乱与复杂，对当下社会性质的认识十分模糊。</p><p>身边的很多人都是从县城来到到城市，了解他们的人生经历，令人感觉社会十分割裂。不同的地区似乎有完全不同的社会性质，组织形态；各地区的权力运行方式，社会规则也大不相同。</p><p>在县城里，依旧是宗法制，家长制；而城市里恰恰相反，年轻人通常反对宗法观点，争取更多的自主权。</p><p>令人担忧的是，县城的教育者，无论有意或无意，大多向下一代传达的的仍是礼大于法，即仍然是维护建设宗法制、家长制的社会的理念，而且通常和感情、道德揉杂在一起灌输，隐蔽且难以抗拒，如此发展，社会岂不是越发割裂？</p><p>由此引出，当下主流的社会性质是什么？为了推动社会的进步与发展，我们是否要打破旧的规则，建立新的秩序？如果是，采用何种方式？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;中国社会之史的分析（外一种：婚姻与家族）&quot;&gt;&lt;a href=&quot;#中国社会之史的分析（外一种：婚姻与家族）&quot; class=&quot;headerlink&quot; title=&quot;中国社会之史的分析（外一种：婚姻与家族）&quot;&gt;&lt;/a&gt;中国社会之史的分析（外一种：婚姻与家族）&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="BookReading" scheme="https://learner0x5a.github.io/tags/BookReading/"/>
    
  </entry>
  
  <entry>
    <title>修复ubuntu16.04 Unity图形界面</title>
    <link href="https://learner0x5a.github.io/2022/03/08/ubuntu16-broken-desktop/"/>
    <id>https://learner0x5a.github.io/2022/03/08/ubuntu16-broken-desktop/</id>
    <published>2022-03-08T06:01:28.000Z</published>
    <updated>2022-03-08T06:04:12.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修复ubuntu16-04-Unity图形界面"><a href="#修复ubuntu16-04-Unity图形界面" class="headerlink" title="修复ubuntu16.04 Unity图形界面"></a>修复ubuntu16.04 Unity图形界面</h1><p>某台式机Ubuntu 16.04 Unity图形界面损坏，表现为输入口令进入桌面后，只显示壁纸，没有任务栏和菜单栏</p><p>修复方式：<a href="https://askubuntu.com/questions/760356/ubuntu-16-04-unity-no-desktop-just-background-wallpaper">https://askubuntu.com/questions/760356/ubuntu-16-04-unity-no-desktop-just-background-wallpaper</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr ~&#x2F;.cache&#x2F;compizconfig-1</span><br><span class="line">sudo rm -fr ~&#x2F;.compiz</span><br><span class="line">sudo rm -fr ~&#x2F;.Xauthority</span><br><span class="line">sudo rm -fr ~&#x2F;.config&#x2F;autostart</span><br><span class="line">sudo apt-get install --reinstall ubuntu-desktop unity compizconfig-settings-manager upstart</span><br><span class="line">sudo dconf reset -f &#x2F;org&#x2F;compiz&#x2F;</span><br><span class="line">setsid unity</span><br></pre></td></tr></table></figure><p>最后重启即可恢复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;修复ubuntu16-04-Unity图形界面&quot;&gt;&lt;a href=&quot;#修复ubuntu16-04-Unity图形界面&quot; class=&quot;headerlink&quot; title=&quot;修复ubuntu16.04 Unity图形界面&quot;&gt;&lt;/a&gt;修复ubuntu16.04 Uni</summary>
      
    
    
    
    
    <category term="others" scheme="https://learner0x5a.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Huggingface笔记</title>
    <link href="https://learner0x5a.github.io/2021/11/03/huggingface/"/>
    <id>https://learner0x5a.github.io/2021/11/03/huggingface/</id>
    <published>2021-11-03T06:26:01.000Z</published>
    <updated>2021-11-04T13:21:10.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求1-自定义tokenizer"><a href="#需求1-自定义tokenizer" class="headerlink" title="需求1: 自定义tokenizer"></a>需求1: 自定义tokenizer</h1><p><a href="https://huggingface.co/docs/tokenizers/python/latest/pipeline.html">官方文档</a>给出了很好的说明。 <br>但都是要训练的tokenizer，如果想要实现一个完全自定义的，<br>需要参考<a href="https://github.com/huggingface/tokenizers/blob/b24a2fc1781d5da4e6ebcd3ecb5b91edffc0a05f/bindings/python/examples/custom_components.py">这里</a>。</p><p>如果无法魔改，那么可以先用自己的方法分完词，用分好词之后的预料训练一个huggingface的WhiteSpace pretokenizer。</p><p>wsf：直接自己把token转成id，把id序列给bert即可。(这样不能用huggingface了)</p><p>要用huggingface的话，传一个vocab_file给BertTokenizerFast。</p><p>或者<a href="https://huggingface.co/transformers/fast_tokenizers.html">参考</a> <br># Loading from a JSON file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> PreTrainedTokenizerFast</span><br><span class="line">fast_tokenizer = PreTrainedTokenizerFast(tokenizer_file=<span class="string">&quot;tokenizer.json&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="需求2-自定义mask"><a href="#需求2-自定义mask" class="headerlink" title="需求2: 自定义mask"></a>需求2: 自定义mask</h1><p>需要修改<a href="https://huggingface.co/transformers/main_classes/data_collator.html">DataCollatorForLanguageModeling</a>类 <br><a href="https://huggingface.co/transformers/_modules/transformers/data/data_collator.html#DataCollatorForLanguageModeling">源码</a><br>的torch_mask_tokens方法，官方代码利用伯努利分布随机采样得到mask:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">probability_matrix.masked_fill_(special_tokens_mask, value=<span class="number">0.0</span>)</span><br><span class="line">masked_indices = torch.bernoulli(probability_matrix).<span class="built_in">bool</span>()</span><br><span class="line">labels[~masked_indices] = -<span class="number">100</span>  <span class="comment"># We only compute loss on masked tokens; ~表示按位取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 80% of the time, we replace masked input tokens with tokenizer.mask_token ([MASK])</span></span><br><span class="line">indices_replaced = torch.bernoulli(torch.full(labels.shape, <span class="number">0.8</span>)).<span class="built_in">bool</span>() &amp; masked_indices</span><br><span class="line">inputs[indices_replaced] = self.tokenizer.convert_tokens_to_ids(self.tokenizer.mask_token)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注：huggingface的attention mask是用来处理多序列的padding的情况。<br>参考：<br><a href="https://cloud.tencent.com/developer/article/1885829">https://cloud.tencent.com/developer/article/1885829</a><br><a href="https://huggingface.co/transformers/glossary.html">https://huggingface.co/transformers/glossary.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求1-自定义tokenizer&quot;&gt;&lt;a href=&quot;#需求1-自定义tokenizer&quot; class=&quot;headerlink&quot; title=&quot;需求1: 自定义tokenizer&quot;&gt;&lt;/a&gt;需求1: 自定义tokenizer&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
    <category term="AI" scheme="https://learner0x5a.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>二进制代码相似性文献调研</title>
    <link href="https://learner0x5a.github.io/2021/10/21/BinSim/"/>
    <id>https://learner0x5a.github.io/2021/10/21/BinSim/</id>
    <published>2021-10-21T07:07:40.000Z</published>
    <updated>2021-10-21T10:37:00.940Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kdocs.cn/l/csc2bETWuhN1">https://kdocs.cn/l/csc2bETWuhN1</a><br>[金山文档] binsim-survey.xlsx</p><p>TBD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://kdocs.cn/l/csc2bETWuhN1&quot;&gt;https://kdocs.cn/l/csc2bETWuhN1&lt;/a&gt;&lt;br&gt;[金山文档] binsim-survey.xlsx&lt;/p&gt;
&lt;p&gt;TBD&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="PaperReading" scheme="https://learner0x5a.github.io/tags/PaperReading/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch (OpenSearch)</title>
    <link href="https://learner0x5a.github.io/2021/10/20/ElasticSearch/"/>
    <id>https://learner0x5a.github.io/2021/10/20/ElasticSearch/</id>
    <published>2021-10-20T01:50:45.000Z</published>
    <updated>2021-10-20T06:48:14.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>Elasticsearch 是一个开源的搜索引擎，建立在全文搜索引擎库 Apache Lucene™ 基础之上。 Lucene 是当下最先进、高性能、全功能的搜索引擎库。 <br>Elasticsearch 使用 Java 编写，其内部使用 Lucene 做索引与搜索，但是隐藏了 Lucene 的复杂性，取而代之的一套简单一致的 RESTful API。</p><p>存储数据到 Elasticsearch 的行为叫做 索引 ，但在索引一个文档之前，需要确定将文档存储在哪里。 \</p><p>一个 Elasticsearch 实例可以 包含多个 索引 ，相应的每个索引可以包含多个 类型 。 这些不同的类型存储着多个 文档 ，每个文档又有 多个 属性 。</p><p>ES中的index就像sql中的库，type就像sql中的表，document就像sql中的记录。 <br>但事实上，ElasticSearch实现上“真正用于分隔数据的结构“只有index，而没有type，type实际上作为了一个元数据（类似SQL中的id，作为额外的标识数据）来实现逻辑划分。</p><p>TODO: 看一遍文档</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>目前开发环境只用单节点。</p><p>TBD</p><h1 id="OpenSearch"><a href="#OpenSearch" class="headerlink" title="OpenSearch"></a>OpenSearch</h1><p>基于Elasticsearch 7.10.2 &amp; Kibana 7.10.2集成了一堆插件，尤其是近似KNN搜索插件。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>使用 OpenSearch REST API 为数据编制索引。存在两种 API：索引 API 和_bulkAPI。 \</p><p>对于新数据以增量方式到达的情况（例如，来自小型企业的客户订单），可以使用 索引 API 在文档到达时单独添加文档。\</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT &lt;index&gt;&#x2F;_doc&#x2F;&lt;id&gt;</span><br><span class="line">&#123; &quot;A JSON&quot;: &quot;document&quot; &#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XPUT &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;movies&#x2F;_doc&#x2F;1&quot; -d &#39;&#123; &quot;title&quot;: &quot;Spirited Away&quot; &#125;&#39; -u &#39;admin:admin&#39; --insecure</span><br></pre></td></tr></table></figure><p><em>注意<code>-d</code>后面要用单引号，json内部要用双引号</em></p><p>对于数据流不太频繁的情况（例如，营销网站的每周更新），可以生成一个文件并将其发送到_bulkAPI。\</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;&lt;index&gt;&quot;, &quot;_id&quot;: &quot;&lt;id&gt;&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;A JSON&quot;: &quot;document&quot; &#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XPOST &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;_bulk?pretty&quot; -u &#39;admin:admin&#39; --insecure --data-binary @data-bulk.json</span><br></pre></td></tr></table></figure><p>data-bulk.json:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;index&quot;:&#123; &quot;_index&quot;: &quot;books&quot;, &quot;_type&quot;: &quot;IT&quot;, &quot;_id&quot;: &quot;1&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;1&quot;,&quot;title&quot;:&quot;Java Book&quot;,&quot;language&quot;:&quot;java&quot;,&quot;author&quot;:&quot;Bruce Eckel&quot;,&quot;price&quot;:70.20,&quot;year&quot;:2007,&quot;description&quot;:&quot;Java must read&quot;, &quot;tel&quot;:&quot;15313016138&quot;, &quot;d_val&quot;:&quot;2018-11-01 12:25:36&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123; &quot;_index&quot;: &quot;books&quot;, &quot;_type&quot;: &quot;IT&quot;, &quot;_id&quot;: &quot;2&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;2&quot;,&quot;title&quot;:&quot;Java perform&quot;,&quot;language&quot;:&quot;java&quot;,&quot;author&quot;:&quot;John Li&quot;,&quot;price&quot;:46.50,&quot;year&quot;:2012,&quot;description&quot;:&quot;permformance ..&quot;, &quot;tel&quot;:&quot;13548621254&quot;, &quot;d_val&quot;:&quot;2018-11-01 08:25:50&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123; &quot;_index&quot;: &quot;books&quot;, &quot;_type&quot;: &quot;IT&quot;, &quot;_id&quot;: &quot;3&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;3&quot;,&quot;title&quot;:&quot;Python compte&quot;,&quot;language&quot;:&quot;python&quot;,&quot;author&quot;:&quot;Tohma Ke&quot;,&quot;price&quot;:81.40,&quot;year&quot;:2016,&quot;description&quot;:&quot;py ...&quot;, &quot;tel&quot;:&quot;13245687956&quot;, &quot;d_val&quot;:&quot;2018-11-01 19:30:20&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123; &quot;_index&quot;: &quot;books&quot;, &quot;_type&quot;: &quot;IT&quot;, &quot;_id&quot;: &quot;4&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;4&quot;,&quot;title&quot;:&quot;Python base&quot;,&quot;language&quot;:&quot;python&quot;,&quot;author&quot;:&quot;Tomash Si&quot;,&quot;price&quot;:54.50,&quot;year&quot;: 2014,&quot;description&quot;:&quot;py base....&quot;, &quot;tel&quot;:&quot;aefda1567fdsa13&quot;, &quot;d_val&quot;:&quot;2018-09-01&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123; &quot;_index&quot;: &quot;books&quot;, &quot;_type&quot;: &quot;IT&quot;, &quot;_id&quot;: &quot;5&quot; &#125;&#125;</span><br><span class="line">&#123;&quot;id&quot;:&quot;5&quot;,&quot;title&quot;:&quot;JavaScript high&quot;,&quot;language&quot;:&quot;javascript&quot;,&quot;author&quot;:&quot;Nicholas C.Zakas&quot;,&quot;price&quot;:66.40,&quot;year&quot;:2012,&quot;description&quot;:&quot;JavaScript.....&quot;, &quot;tel&quot;:&quot;a14512dfa&quot;, &quot;d_val&quot;:&quot;2018-08-01&quot;&#125;</span><br></pre></td></tr></table></figure><p>对于大量文档，将请求集中在一起并使用_bulkAPI 可提供卓越的性能。<br>但是，如果文档很大，可能需要单独为它们编制索引。</p><p>在 OpenSearch 中，数据的基本单位是 JSON文档。在索引中，OpenSearch 使用唯一 ID 标识每个文档。</p><p>当将文档添加到尚不存在的索引时，OpenSearch 会自动创建索引。如果未在请求中指定 ID，它还会自动生成一个 ID。<br>自动 ID 生成有一个明显的缺点：因为索引请求没有指定文档 ID，以后无法轻松更新文档。此外，如果运行此请求 10 次，OpenSearch 会将此文档索引为 10 个具有唯一 ID 的不同文档。<br>指定一个 ID，如果运行此命令 10 次，仍然只有一个索引的文档，该_version字段增加到 10。</p><h3 id="索引命名"><a href="#索引命名" class="headerlink" title="索引命名"></a>索引命名</h3><p>OpenSearch 索引具有以下命名限制：</p><ul><li>所有字母必须小写。</li><li>索引名称不能以下划线 ( _) 或连字符 ( -)开头。</li><li>索引名称不能包含空格、逗号或以下字符：:, “, *, +, /, , |, ?, #, &gt;, 或&lt;</li></ul><h3 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h3><p>索引文档后，可以通过发送 GET 请求取数据，原始文档在返回的json的_source对象中 \</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XGET &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;movies&#x2F;_doc&#x2F;1&quot; -u &#39;admin:admin&#39; --insecure</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul><li>要更新现有字段或添加新字段，请向_update操作发送 POST 请求，并在doc对象中进行更改 </li></ul><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XPOST &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;movies&#x2F;_update&#x2F;1&quot; -u &#39;admin:admin&#39; --insecure -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &quot;Castle in the Sky&quot;,</span><br><span class="line">    &quot;genre&quot;: [&quot;Animation&quot;, &quot;Fantasy&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#39;</span><br><span class="line"></span><br><span class="line"># 得到</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;movies&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 2,</span><br><span class="line">  &quot;_seq_no&quot; : 1,</span><br><span class="line">  &quot;_primary_term&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;title&quot; : &quot;Castle in the Sky&quot;,</span><br><span class="line">    &quot;genre&quot; : [</span><br><span class="line">      &quot;Animation&quot;,</span><br><span class="line">      &quot;Fantasy&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引的_version字段代表文档更新的次数。</p><ul><li><p>要完全替换文档，请使用 PUT 请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT movies&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;Spirited Away&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据文档是否已经存在有条件地更新 </p></li></ul><p>使用upsert对象。在这里，如果文档存在，则其title字段更改为Castle in the Sky。如果不是，OpenSearch 会索引upsert对象中的文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST movies&#x2F;_update&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &quot;Castle in the Sky&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;upsert&quot;: &#123;</span><br><span class="line">    &quot;title&quot;: &quot;Only Yesterday&quot;,</span><br><span class="line">    &quot;genre&quot;: [&quot;Animation&quot;, &quot;Fantasy&quot;],</span><br><span class="line">    &quot;date&quot;: 1993</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>要从索引中删除文档，请使用 DELETE 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE movies&#x2F;_doc&#x2F;1</span><br></pre></td></tr></table></figure><p>之后如果再查询，就会得到found=false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XGET &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;movies&#x2F;_doc&#x2F;1&quot; -u &#39;admin:admin&#39; --insecure</span><br><span class="line">&#123;&quot;_index&quot;:&quot;movies&quot;,&quot;_type&quot;:&quot;_doc&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;found&quot;:false&#125;#</span><br></pre></td></tr></table></figure><h3 id="索引配置"><a href="#索引配置" class="headerlink" title="索引配置"></a>索引配置</h3><p>直接提供数据其实是采用了默认的索引配置，其实可以创建自定义的index，参见近似KNN搜索的index创建</p><h3 id="索引别名"><a href="#索引别名" class="headerlink" title="索引别名"></a>索引别名</h3><p>如果数据分布在多个索引中，而不是跟踪要查询的索引，可以创建一个别名并对其进行查询。</p><p>例如，如果将日志存储到基于月份的索引中，并且经常查询前两个月的日志，可以创建一个last_2_months别名并更新它指向的每个月的索引。</p><p>因为可以随时更改别名指向的索引，所以在应用程序中使用别名引用索引可以在不停机的情况下重新索引数据。</p><p>TBD</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>cheatsheet: <a href="https://www.jianshu.com/p/3cb205b5354a">https://www.jianshu.com/p/3cb205b5354a</a> \</p><p><a href="https://elasticsearch-cheatsheet.jolicode.com/">https://elasticsearch-cheatsheet.jolicode.com/</a></p><h3 id="多字段包含关系"><a href="#多字段包含关系" class="headerlink" title="多字段包含关系"></a>多字段包含关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39; -XPOST &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;books&#x2F;_search?pretty&#x3D;true&quot; -u &#39;admin:admin&#39; --insecure -d &#39;&#123;&quot;query&quot;: &#123;</span><br><span class="line">      &quot;bool&quot;: &#123;</span><br><span class="line">           &quot;must&quot;: [</span><br><span class="line">                 &#123; &quot;match&quot;: &#123; &quot;port&quot;:  &quot;9083&quot; &#125;&#125;, # 这里是包含关系，port字段里只要有9083就是true</span><br><span class="line">                 &#123; &quot;match&quot;: &#123; &quot;name&quot;: &quot;tt_vod_program_play_test&quot; &#125;&#125;,</span><br><span class="line">                 &#123; &quot;match&quot;: &#123; &quot;s_timestamp&quot;: &quot;1545719719164&quot; &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 10&#125;&#39;</span><br></pre></td></tr></table></figure><h3 id="查询数字范围"><a href="#查询数字范围" class="headerlink" title="查询数字范围"></a>查询数字范围</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-d &#39;&#123;  </span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot; : &#123;</span><br><span class="line">            &quot;price&quot; : &#123;</span><br><span class="line">                &quot;gte&quot; : 50,</span><br><span class="line">                &quot;lte&quot; : 70</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h3 id="近似KNN搜索"><a href="#近似KNN搜索" class="headerlink" title="近似KNN搜索"></a>近似KNN搜索</h3><p>一旦数据集超过数十万个向量，精确KNN开销太大，需要采用近似KNN算法。</p><p>近似knn算法的benchmark参考：<a href="https://github.com/erikbern/ann-benchmarks/">https://github.com/erikbern/ann-benchmarks/</a></p><ul><li>首先需要创建一种索引，其index.knn设置为true，然后添加一个或多个类型为knn_vector的字段</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">curl -H &#39;Content-Type: application&#x2F;json&#39;  -u &#39;admin:admin&#39; --insecure -X PUT &quot;https:&#x2F;&#x2F;localhost:9200&#x2F;my-knn-index-1&quot; -d &#39;&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 5,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0,</span><br><span class="line">    &quot;index&quot;: &#123;</span><br><span class="line">      &quot;knn&quot;: true,</span><br><span class="line">      &quot;knn.algo_param.ef_search&quot;: 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_vector1&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;knn_vector&quot;,</span><br><span class="line">          &quot;dimension&quot;: 2,</span><br><span class="line">          &quot;method&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;hnsw&quot;,</span><br><span class="line">            &quot;space_type&quot;: &quot;l2&quot;,</span><br><span class="line">            &quot;engine&quot;: &quot;nmslib&quot;,</span><br><span class="line">            &quot;parameters&quot;: &#123;</span><br><span class="line">              &quot;ef_construction&quot;: 128,</span><br><span class="line">              &quot;m&quot;: 24</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;my_vector2&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;knn_vector&quot;,</span><br><span class="line">          &quot;dimension&quot;: 4,</span><br><span class="line">          &quot;method&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;hnsw&quot;,</span><br><span class="line">            &quot;space_type&quot;: &quot;cosinesimil&quot;,</span><br><span class="line">            &quot;engine&quot;: &quot;nmslib&quot;,</span><br><span class="line">            &quot;parameters&quot;: &#123;</span><br><span class="line">              &quot;ef_construction&quot;: 256,</span><br><span class="line">              &quot;m&quot;: 48</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>构造数据示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;1&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector1&quot;: [1.5, 2.5], &quot;price&quot;: 12.2, &quot;hash&quot;: &quot;deadbeef&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;2&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector1&quot;: [2.5, 3.5], &quot;price&quot;: 7.1, &quot;hash&quot;: &quot;deadbeee&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;3&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector1&quot;: [3.5, 4.5], &quot;price&quot;: 12.9, &quot;hash&quot;: &quot;deadbeed&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;4&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector1&quot;: [5.5, 6.5], &quot;price&quot;: 1.2, &quot;hash&quot;: &quot;deadbeec&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;5&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector1&quot;: [4.5, 5.5], &quot;price&quot;: 3.7, &quot;hash&quot;: &quot;deadbeeb&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;6&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector2&quot;: [1.5, 5.5, 4.5, 6.4], &quot;price&quot;: 10.3, &quot;hash&quot;: &quot;deadbeea&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;7&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector2&quot;: [2.5, 3.5, 5.6, 6.7], &quot;price&quot;: 5.5, &quot;hash&quot;: &quot;deadbee0&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;8&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector2&quot;: [4.5, 5.5, 6.7, 3.7], &quot;price&quot;: 4.4, &quot;hash&quot;: &quot;deadbedf&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_index&quot;: &quot;my-knn-index-1&quot;, &quot;_id&quot;: &quot;9&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;my_vector2&quot;: [1.5, 5.5, 4.5, 6.4], &quot;price&quot;: 8.9, &quot;hash&quot;: &quot;deadbede&quot; &#125;</span><br></pre></td></tr></table></figure><p>然后搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET my-knn-index-1&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;knn&quot;: &#123;</span><br><span class="line">      &quot;my_vector2&quot;: &#123;</span><br><span class="line">        &quot;vector&quot;: [2, 3, 5, 6],</span><br><span class="line">        &quot;k&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;post_filter&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 5,</span><br><span class="line">        &quot;lte&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>性能优化</li></ul><ul><li><p>在创建索引时禁用刷新间隔</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;&lt;index_name&gt;&#x2F;_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;index&quot; : &#123;</span><br><span class="line">        &quot;refresh_interval&quot; : &quot;-1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>索引建完记得重新启用！</p></li><li><p>增加线程数<br> 在创建索引时，使用knn.algo_param.index_thread_qty设置要分配的线程数。</p></li><li><p>增加分片（shard）数，以减小每个分片中的段（section）数，从而增强并行化：在创建索引的时候进行配置：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;settings&quot;: &#123;</span><br><span class="line">  &quot;number_of_shards&quot;: 2,</span><br><span class="line">  &quot;number_of_replicas&quot;: 1</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 注意，Elastic 官方博客文章建议：堆内存和分片的配置比例为1:20，举例：30GB堆内存，最多可有600个分片。 <br> <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.0/misc-cluster.html#cluster-shard-limit">https://www.elastic.co/guide/en/elasticsearch/reference/7.0/misc-cluster.html#cluster-shard-limit</a> <br> <a href="https://github.com/elastic/kibana/issues/35529">https://github.com/elastic/kibana/issues/35529</a> \</p></li><li><p>预热索引</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_plugins&#x2F;_knn&#x2F;warmup&#x2F;index1,index2,index3?pretty</span><br><span class="line">&#123;</span><br><span class="line">&quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 6,</span><br><span class="line">    &quot;successful&quot; : 6,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;p&gt;Elasticsearch 是一个开源的搜索引擎，建</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Note</title>
    <link href="https://learner0x5a.github.io/2021/09/02/mysql/"/>
    <id>https://learner0x5a.github.io/2021/09/02/mysql/</id>
    <published>2021-09-02T09:09:24.000Z</published>
    <updated>2021-09-02T09:20:50.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL的迁移"><a href="#MySQL的迁移" class="headerlink" title="MySQL的迁移"></a>MySQL的迁移</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p><code>.\mysqldump.exe -u root -p database_name table_name &gt; table_name.sql</code></p><p><code>.\mysqldump.exe -u root -p database_name table_name -r table_name.sql</code></p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><code>mysql -u root -p database_name &lt; table_name.sql</code></p><h2 id="场景：从windows迁移到ubuntu"><a href="#场景：从windows迁移到ubuntu" class="headerlink" title="场景：从windows迁移到ubuntu"></a>场景：从windows迁移到ubuntu</h2><p>一开始用powershell：</p><p><code>.\mysqldump.exe -u root -p database_name table_name &gt; table_name.sql</code></p><p>但是在ubuntu里导入的时候报错：</p><p><code>ERROR: ASCII &#39;\0&#39; appeared in the statement, but this is not allowed unless option --binary-mode ...</code></p><p>查了一下发现是powershell的原因：由于写出用的是重定向，而powershell的默认编码是UTF-16，导致ubuntu导入的时候不认识 <br>用<code>file</code>看一下，可以发现确实如此</p><p><code>Little-endian UTF-16 Unicode text, with very long lines, with CRLF line terminators.</code></p><p>解决方案是，不采用重定向写出：</p><p><code>.\mysqldump.exe -u root -p database_name table_name -r table_name.sql</code></p><p><code>file</code>的结果是：</p><p><code>ISO-8859 text, with very long lines</code>或者<code>ASCII text</code></p><p>然后导入：</p><p><code>mysql -u root -p database_name &lt; table_name.sql</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL的迁移&quot;&gt;&lt;a href=&quot;#MySQL的迁移&quot; class=&quot;headerlink&quot; title=&quot;MySQL的迁移&quot;&gt;&lt;/a&gt;MySQL的迁移&lt;/h1&gt;&lt;h2 id=&quot;导出&quot;&gt;&lt;a href=&quot;#导出&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="database" scheme="https://learner0x5a.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中分类问题的数据均衡</title>
    <link href="https://learner0x5a.github.io/2021/08/26/data-balance/"/>
    <id>https://learner0x5a.github.io/2021/08/26/data-balance/</id>
    <published>2021-08-26T11:00:57.000Z</published>
    <updated>2021-08-27T13:01:14.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题：真实世界的数据分布不一定均衡，那为什么大多数ML-DL要做数据均衡？"><a href="#问题：真实世界的数据分布不一定均衡，那为什么大多数ML-DL要做数据均衡？" class="headerlink" title="问题：真实世界的数据分布不一定均衡，那为什么大多数ML/DL要做数据均衡？"></a><strong>问题：真实世界的数据分布不一定均衡，那为什么大多数ML/DL要做数据均衡？</strong></h1><p>答案：根据场景来决定是否要数据均衡</p><h2 id="场景1-癌症二分类"><a href="#场景1-癌症二分类" class="headerlink" title="场景1: 癌症二分类"></a>场景1: 癌症二分类</h2><p>真实数据分布是：绝大多数人没有癌症，极少数人有癌症；如果不做数据均衡，那么一个ML分类器会倾向于把所有样本判断成没有癌症，即全是漏报，没有误报 <br>在辅助医生诊断时，显然是不行的：可以有误报，尽量没有漏报；<br>所以在训练模型时要做数据均衡。</p><h2 id="场景2-英文字母识别"><a href="#场景2-英文字母识别" class="headerlink" title="场景2: 英文字母识别"></a>场景2: 英文字母识别</h2><p>真实数据分布不是均匀分布，高频字母例如e，低频字母例如v；</p><p>如果做数据均衡，那么训练后的分类器对于每个字母分类错误的概率都是一样的； <br>如果不做数据均衡，那么训练后的分类器对于每个字母分类错误的概率不一样，错误概率的分布应该是接近字母的分布； <br>所以要根据场景做选择，例如做文本识别，高频字母识别准确率比低频字母准确率更重要，所以不能做数据均衡。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分类错误概率的分布和训练数据的分布具有一致性，所以要不要做数据均衡，要由场景来决定。</p><h1 id="数据均衡方法"><a href="#数据均衡方法" class="headerlink" title="数据均衡方法"></a>数据均衡方法</h1><p>如果要做数据均衡，可以从以下几个方面考虑：</p><ul><li>数据上采样/下采样</li><li>NN：Focal Loss</li><li>NN：二分类时，可以调整分类阈值</li><li>数据合成：SMOTE算法，利用小众样本在特征空间的相似性来合成新样本</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题：真实世界的数据分布不一定均衡，那为什么大多数ML-DL要做数据均衡？&quot;&gt;&lt;a href=&quot;#问题：真实世界的数据分布不一定均衡，那为什么大多数ML-DL要做数据均衡？&quot; class=&quot;headerlink&quot; title=&quot;问题：真实世界的数据分布不一定均衡，</summary>
      
    
    
    
    
    <category term="AI" scheme="https://learner0x5a.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Hyper-V挂载共享文件夹</title>
    <link href="https://learner0x5a.github.io/2021/08/16/hyper-share/"/>
    <id>https://learner0x5a.github.io/2021/08/16/hyper-share/</id>
    <published>2021-08-16T09:33:42.000Z</published>
    <updated>2021-08-16T09:42:11.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-Host-Ubuntu-Guest"><a href="#Windows-Host-Ubuntu-Guest" class="headerlink" title="Windows Host + Ubuntu Guest"></a>Windows Host + Ubuntu Guest</h1><h1 id="Host配置"><a href="#Host配置" class="headerlink" title="Host配置"></a>Host配置</h1><p>在资源管理器中的<strong>磁盘</strong>，例如<code>D:\</code>上右键-属性-共享-高级共享-<strong>勾选</strong>共享此文件夹，记一下网络路径，比如<code>Desktop-jpjdlkr\d</code></p><p>其实可以对磁盘中具体的某个文件夹开启共享，但实测发现，当文件夹中的文件过大/过多的时候会失败（未知原因）</p><h1 id="Guest访问"><a href="#Guest访问" class="headerlink" title="Guest访问"></a>Guest访问</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 18.04</span></span><br><span class="line">sudo apt install cifs-utils</span><br><span class="line"><span class="comment"># 用ip访问</span></span><br><span class="line">sudo mount.cifs //&lt;host_ip&gt;/d /path/to/mnt_destination -o user=&lt;Username&gt;</span><br><span class="line"><span class="comment"># 然后输入密码即可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Windows-Host-Ubuntu-Guest&quot;&gt;&lt;a href=&quot;#Windows-Host-Ubuntu-Guest&quot; class=&quot;headerlink&quot; title=&quot;Windows Host + Ubuntu Guest&quot;&gt;&lt;/a&gt;Windows H</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>小米6搞机:BootLoader+Root+Magisk</title>
    <link href="https://learner0x5a.github.io/2021/06/25/magisk/"/>
    <id>https://learner0x5a.github.io/2021/06/25/magisk/</id>
    <published>2021-06-25T07:55:44.000Z</published>
    <updated>2021-06-25T09:15:54.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解锁-Root"><a href="#解锁-Root" class="headerlink" title="解锁+Root"></a>解锁+Root</h1><p>去官网申请解锁<a href="http://www.miui.com/unlock/index.html">bootloader</a><br>下载解锁工具（注意，解锁工具需要登录，先登录再进fastboot！）<br>刷机，由于我之前申请了MIUI12的内测，需要降级回MIUI10开发版，即官网给出的小米6最高的<a href="http://www.miui.com/download-330.html">开发版</a><br>为了获取完全root权限，可以修改system分区，使用<a href="https://developer.android.com/studio/releases/platform-tools">adb</a>解锁system<br>需要打开开发者选项中的USB调试，USB安装，USB调试(安全设置)，关闭“启用MIUI优化”。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb.exe root</span><br><span class="line">adb.exe disable-verity</span><br></pre></td></tr></table></figure><p>如果需要用adb传文件可以使用<code>adb push file_on_pc dir_on_phone</code>命令<br>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\adb.exe push .\Magisk-v23.0.apk &#x2F;sdcard&#x2F;Download&#x2F;</span><br><span class="line">.\adb.exe push .\MagiskManager-v5.8.1.apk &#x2F;sdcard&#x2F;Download&#x2F;</span><br><span class="line">.\adb.exe push .\igniter-0.10.2-beta.apk &#x2F;sdcard&#x2F;Download&#x2F;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Aaron_Miller/article/details/106885294">参考</a></p><h1 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h1><p><a href="https://sspai.com/post/53043/">参考1:Magisk初识与安装</a><br><a href="https://www.bilibili.com/read/cv3310322/">参考2:小米6刷入Recovery</a></p><p>TWRP是第三方recovery，但厂商认可。<br>利用TWRP安装Magisk，先去下载<a href="https://twrp.me/xiaomi/xiaomimi6.html">TWRP</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行 adb reboot bootloader 进入 Bootloader 界面</span><br><span class="line">执行 fastboot boot TWRP.img 进入临时 TWRP</span><br><span class="line">在 TWRP 中刷入你下载的 Magisk 安装包</span><br></pre></td></tr></table></figure><p>去github下载<a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a>和<a href="https://github.com/topjohnwu/MagiskManager/releases">MagiskManager</a><br>然后用adb把这两个安装包传到手机里面去<br>然后在TWRP里面安装Magisk，重启，进入MIUI后安装MagiskManager<br>打开MagiskManager之后，会检查更新若干次，直到升级Manager到最新版本。<br>后续可以考虑<a href="https://blog.csdn.net/qq_37068181/article/details/112368793">在Magisk里面再装个xposed</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解锁-Root&quot;&gt;&lt;a href=&quot;#解锁-Root&quot; class=&quot;headerlink&quot; title=&quot;解锁+Root&quot;&gt;&lt;/a&gt;解锁+Root&lt;/h1&gt;&lt;p&gt;去官网申请解锁&lt;a href=&quot;http://www.miui.com/unlock/index.h</summary>
      
    
    
    
    
    <category term="others" scheme="https://learner0x5a.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>HTML, CSS 和 JavaScript</title>
    <link href="https://learner0x5a.github.io/2021/05/27/web-dev/"/>
    <id>https://learner0x5a.github.io/2021/05/27/web-dev/</id>
    <published>2021-05-27T06:35:12.000Z</published>
    <updated>2021-05-27T15:00:22.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h1><h2 id="HTML-定义了网页的内容"><a href="#HTML-定义了网页的内容" class="headerlink" title="HTML 定义了网页的内容"></a>HTML 定义了网页的内容</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>各个元素的说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> 声明为 HTML5 文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> 元素是 HTML 页面的根元素</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> 元素包含了文档的元（meta）数据，如 <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> 定义网页编码格式为 utf-8。</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> 元素描述了文档的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> 元素包含了可见的页面内容</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 元素定义一个大标题</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 元素定义一个段落</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> 元素定义一个链接</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span> 元素定义一个图片</span><br></pre></td></tr></table></figure><h3 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h3><p>HTML元素可以设置属性 </p><p>属性可以在元素中添加附加信息 </p><p>属性一般描述于开始标签 </p><p>属性总是以名称/值对的形式出现，比如：name=”value”; href=”<a href="https://www.runoob.com&quot;/">https://www.runoob.com&quot;</a>; id=”demo” </p><p>属性之间空格分开</p><h2 id="CSS-描述了网页的布局"><a href="#CSS-描述了网页的布局" class="headerlink" title="CSS 描述了网页的布局"></a>CSS 描述了网页的布局</h2><p>CSS其实是HTML的<code>&lt;style&gt;</code>元素</p><h3 id="内部样式表-Internal-style-sheet"><a href="#内部样式表-Internal-style-sheet" class="headerlink" title="内部样式表(Internal style sheet)"></a>内部样式表(Internal style sheet)</h3><p>在HTML的<code>&lt;head&gt;</code>段定义各个元素的<code>&lt;style&gt;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部样式表-External-style-sheet"><a href="#外部样式表-External-style-sheet" class="headerlink" title="外部样式表(External style sheet)"></a>外部样式表(External style sheet)</h3><p>为了迁移方便，独立出去成为一个CSS文件，在HTML中<code>&lt;head&gt;</code>部分用<code>&lt;link&gt;</code>引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;/images/back40.gif&quot;);&#125;</span><br></pre></td></tr></table></figure><h3 id="内联样式-Inline-style"><a href="#内联样式-Inline-style" class="headerlink" title="内联样式(Inline style)"></a>内联样式(Inline style)</h3><p>直接在HTML元素里设置属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:sienna;margin-left:20px&quot;</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-控制了网页的行为"><a href="#JavaScript-控制了网页的行为" class="headerlink" title="JavaScript 控制了网页的行为"></a>JavaScript 控制了网页的行为</h2><p>JS是HTML的<code>&lt;script&gt;</code>元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">displayDate</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML=<span class="built_in">Date</span>();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个 JavaScript 程序<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;displayDate()&quot;</span>&gt;</span>显示日期<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以直接写HTML"><a href="#JS可以直接写HTML" class="headerlink" title="JS可以直接写HTML"></a>JS可以直接写HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">JavaScript 能够直接写入 HTML 输出流中：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;这是一个段落。&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">您只能在 HTML 输出流中使用 <span class="tag">&lt;<span class="name">strong</span>&gt;</span>document.write<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>。</span><br><span class="line">如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以对事件作出反应"><a href="#JS可以对事件作出反应" class="headerlink" title="JS可以对事件作出反应"></a>JS可以对事件作出反应</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个 JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">JavaScript 能够对事件作出反应。比如对按钮的点击：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;欢迎!&#x27;)&quot;</span>&gt;</span>点我!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以改变HTML的元素"><a href="#JS可以改变HTML的元素" class="headerlink" title="JS可以改变HTML的元素"></a>JS可以改变HTML的元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一段 JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">JavaScript 能改变 HTML 元素的内容。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>);  <span class="comment">// 找到元素</span></span></span><br><span class="line"><span class="javascript">    x.innerHTML=<span class="string">&quot;Hello JavaScript!&quot;</span>;    <span class="comment">// 改变内容</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以改变HTML图像"><a href="#JS可以改变HTML图像" class="headerlink" title="JS可以改变HTML图像"></a>JS可以改变HTML图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">changeImage</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    element=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;myimage&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (element.src.match(<span class="string">&quot;bulbon&quot;</span>))</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        element.src=<span class="string">&quot;/images/pic_bulboff.gif&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">else</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        element.src=<span class="string">&quot;/images/pic_bulbon.gif&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myimage&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeImage()&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/pic_bulboff.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以改变HTML样式"><a href="#JS可以改变HTML样式" class="headerlink" title="JS可以改变HTML样式"></a>JS可以改变HTML样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>) <span class="comment">// 找到元素</span></span></span><br><span class="line"><span class="javascript">    x.style.color=<span class="string">&quot;#ff0000&quot;</span>;          <span class="comment">// 改变样式</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS可以验证用户输入"><a href="#JS可以验证用户输入" class="headerlink" title="JS可以验证用户输入"></a>JS可以验证用户输入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一段 JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入数字。如果输入值不是数字，浏览器会弹出提示框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(x)||x.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>,<span class="string">&quot;&quot;</span>)==<span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;不是数字&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-DOM-文档对象模型"><a href="#HTML-DOM-文档对象模型" class="headerlink" title="HTML DOM (文档对象模型)"></a>HTML DOM (文档对象模型)</h2><p>DOM（Document Object Model）定义了访问 HTML 和 XML 文档的标准：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型</li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><p>HTML DOM 定义了所有 HTML 元素的对象和属性，以及访问它们的方法。</p><h3 id="编程接口"><a href="#编程接口" class="headerlink" title="编程接口"></a>编程接口</h3><p>可通过 JavaScript （以及其他编程语言）对 HTML DOM 进行访问。 <br>前述JS代码即为JS DOM，利用JS改变HTML的内容。</p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>markdown里写html代码时不能顶格，要给缩进，元素语句要加引号，作为代码出现，不然网页加载不出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web开发&quot;&gt;&lt;a href=&quot;#web开发&quot; class=&quot;headerlink&quot; title=&quot;web开发&quot;&gt;&lt;/a&gt;web开发&lt;/h1&gt;&lt;h2 id=&quot;HTML-定义了网页的内容&quot;&gt;&lt;a href=&quot;#HTML-定义了网页的内容&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="BookReading" scheme="https://learner0x5a.github.io/tags/BookReading/"/>
    
  </entry>
  
  <entry>
    <title>pytorch笔记</title>
    <link href="https://learner0x5a.github.io/2021/04/07/pytorch-notes/"/>
    <id>https://learner0x5a.github.io/2021/04/07/pytorch-notes/</id>
    <published>2021-04-07T15:38:24.000Z</published>
    <updated>2021-04-08T14:42:24.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方教程-Learn-PyTorch-with-Examples"><a href="#官方教程-Learn-PyTorch-with-Examples" class="headerlink" title="官方教程 Learn PyTorch with Examples"></a>官方教程 Learn PyTorch with Examples</h1><p><a href="https://pytorch.org/tutorials/beginner/pytorch_with_examples.html">https://pytorch.org/tutorials/beginner/pytorch_with_examples.html</a></p><h1 id="PyTorch-Batch训练的一些笔记"><a href="#PyTorch-Batch训练的一些笔记" class="headerlink" title="PyTorch Batch训练的一些笔记"></a>PyTorch Batch训练的一些笔记</h1><p>根据可视化结果，batch size越小，得到的分类边界更精细，收敛更好，但收敛越慢，batch size过小，就会导致震荡甚至无法收敛。<br>batch size越大，收敛越快，但分类边界比较粗糙。</p><h1 id="调用指定的GPU"><a href="#调用指定的GPU" class="headerlink" title="调用指定的GPU"></a>调用指定的GPU</h1><p>直接终端中设定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=1 python3 main.py</span><br></pre></td></tr></table></figure><h1 id="torch-nonzero"><a href="#torch-nonzero" class="headerlink" title="torch.nonzero"></a>torch.nonzero</h1><p>torch.nonzero() 找出tensor中非零的元素的索引.</p><h1 id="PyTorch-梯度传播的笔记"><a href="#PyTorch-梯度传播的笔记" class="headerlink" title="PyTorch 梯度传播的笔记"></a>PyTorch 梯度传播的笔记</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.FloatTensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])  </span><br><span class="line">tensor.requires_grad=<span class="literal">True</span>  </span><br><span class="line">mean_out = torch.mean(tensor*tensor)       <span class="comment"># x^2  </span></span><br><span class="line">max_out = torch.<span class="built_in">max</span>(tensor*tensor)  </span><br><span class="line">  </span><br><span class="line">print(mean_out)  <span class="comment"># tensor(7.5000, grad_fn=&lt;MeanBackward0&gt;)  </span></span><br><span class="line">print(max_out)  <span class="comment"># tensor(16., grad_fn=&lt;MaxBackward1&gt;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次backward会自动销毁计算图</span></span><br><span class="line">mean_out.backward()    <span class="comment"># 反向传播; 这里不用retain_graph=True，因为mean_out和max_out是不同的计算图；这里只销毁mean_out</span></span><br><span class="line">print(tensor.grad)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[0.5000, 1.0000],</span></span><br><span class="line"><span class="string">    [1.5000, 2.0000]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">max_out.backward(retain_graph=<span class="literal">True</span>) <span class="comment"># 自动累计梯度; 这里需要加retain_graph=True，因为下面还要用max_out</span></span><br><span class="line">print(tensor.grad)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[ 0.5000,  1.0000],</span></span><br><span class="line"><span class="string">    [ 1.5000, 10.0000]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tensor.grad = <span class="literal">None</span> <span class="comment"># 如果想重新算梯度，需要将梯度清零；tensor.grad = None</span></span><br><span class="line">max_out.backward()</span><br><span class="line">print(tensor.grad)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">tensor([[0., 0.],</span></span><br><span class="line"><span class="string">    [0., 8.]])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mean_out = 1/4 * sum(tensor*tensor)   </span></span><br><span class="line"><span class="comment"># mean_out 的梯度是d(mean_out)/d(tensor) = 1/4*2*tensor = tensor/2  </span></span><br><span class="line"><span class="comment"># max_out = max(tensor*tensor)   </span></span><br><span class="line"><span class="comment"># max_out 的梯度是d(max_out)/d(tensor) = max(2*tensor)  </span></span><br><span class="line"><span class="comment"># mean,max之类的函数不参与梯度运算，原样保留  </span></span><br><span class="line"><span class="comment"># max simply selects the greatest value and ignores the others, so max is the identity operation for that one element.   </span></span><br><span class="line"><span class="comment"># Therefore the gradient can flow backwards through it for just that one element.  </span></span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="NN-花式求梯度"><a href="#NN-花式求梯度" class="headerlink" title="NN 花式求梯度"></a>NN 花式求梯度</h2><p>NN来自<a href="https://github.com/yunjey/pytorch-tutorial/blob/master/tutorials/01-basics/feedforward_neural_network/main.py">https://github.com/yunjey/pytorch-tutorial/blob/master/tutorials/01-basics/feedforward_neural_network/main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fully connected neural network with one hidden layer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_size, hidden_size, num_classes</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(NeuralNet, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(input_size, hidden_size)</span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line">        self.fc2 = nn.Linear(hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.fc1(x)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个函数用来算梯度，这里其实和forward一样，用来算输出的梯度; </span></span><br><span class="line">    <span class="comment"># 也可以改成别的，比如去掉fc2和relu，算一下第一层对输入的梯度；</span></span><br><span class="line">    <span class="comment"># 也可以指定某个神经元的梯度，比如return out[:,2]就是只用第三个神经元算梯度</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_grad</span>(<span class="params">self,x</span>):</span>     </span><br><span class="line">        out = self.fc1(x)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line">        out = self.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">model = NeuralNet(input_size, hidden_size, num_classes).to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loss and optimizer</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> i, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="comment"># Move tensors to the configured device</span></span><br><span class="line">        images = images.reshape(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>).to(device)</span><br><span class="line">        images.requires_grad = <span class="literal">True</span></span><br><span class="line">        labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Forward pass</span></span><br><span class="line">        outputs = model(images)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Backward and optimize</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 这里计算的是loss对input的梯度; shape (100,784); loss是一个标量，不需要传参给backward()</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        print(np.shape(images.grad),images.grad[<span class="number">0</span>][:<span class="number">5</span>])</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算输出对输入的梯度 d(output) / d(input); shape也是(100,784)，原因参见下面backward的解析</span></span><br><span class="line">        model.zero_grad()</span><br><span class="line">        out = model.pre_grad(images)</span><br><span class="line">        <span class="comment"># 求向量对向量的梯度，需要传一个grad_tensor进去，这个grad_tensor和out的shape要一样</span></span><br><span class="line">        <span class="comment"># 这里的ones_like(out)就是产生一个和out的shape一样，元素全为1的tensor</span></span><br><span class="line">        <span class="comment"># 这个grad_tensor的物理意义是权重; </span></span><br><span class="line">        <span class="comment"># torch在算完Jacobian矩阵后，会用Jacobian矩阵乘上这个grad_tensor，对各列（即每个神经元对input所有字节的梯度）做一个加权和</span></span><br><span class="line">        <span class="comment"># 所以得到的仍然是一个shape为(100,784)的张量</span></span><br><span class="line">        out.backward(torch.ones_like(out)) </span><br><span class="line">        print(np.shape(images.grad),images.grad[<span class="number">0</span>][:<span class="number">5</span>])</span><br><span class="line">        images.grad = <span class="literal">None</span> <span class="comment"># 记得清零</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可以参考：https://blog.csdn.net/weixin_38314865/article/details/100423919</span></span><br><span class="line">        <span class="comment"># https://mustafaghali11.medium.com/how-pytorch-backward-function-works-55669b3b7c62</span></span><br><span class="line">        <span class="comment"># https://zhuanlan.zhihu.com/p/83172023</span></span><br><span class="line">        <span class="comment"># 注意，如果input是一个batch，即使最后一层只有一个神经元，也要传grad_tensor进去</span></span><br><span class="line">        <span class="comment">#   虽然out的shape是(batch_size,), 但其实后台直接按(batch_size,1)来处理了，</span></span><br><span class="line">        <span class="comment">#   所以乘上一个ones_like(out)相当于对第二维求加权和，使得求导可以进行</span></span><br><span class="line">        <span class="comment">#   shape的变化：(batch_size,1) * (batch_size,) -&gt; (1,)；</span></span><br><span class="line">        <span class="comment">#   所以本质是用某种方法让dy/dx的y变成一个标量</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            # 如果想要得到原始的Jacobian矩阵，需要利用one-hot向量多次backward，再把结果拼起来; 例如</span></span><br><span class="line"><span class="string">            x = torch.randn(2, requires_grad=True)</span></span><br><span class="line"><span class="string">            y = x * 2</span></span><br><span class="line"><span class="string">            J = torch.zeros(x.shape[0],x.shape[0]) # 初始化空Jacobian矩阵 (2*2)</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            y.backward(torch.FloatTensor([[1,0]]),retain_graph=True) # 第一行</span></span><br><span class="line"><span class="string">            J[:,0] = x.grad</span></span><br><span class="line"><span class="string">            x.grad = None</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            y.backward(torch.FloatTensor([[0,1]]),retain_graph=True) # 第二行</span></span><br><span class="line"><span class="string">            J[:,1] = x.grad</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            print(J)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            # 对于这个nn，Jacobian矩阵也可以通过修改计算图pre_grad，遍历神经元再拼起来得到</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 也可以计算对单个样本的梯度; shape (1,784)</span></span><br><span class="line">        img = images[<span class="number">0</span>].view(<span class="number">1</span>,-<span class="number">1</span>)</span><br><span class="line">        img.requires_grad = <span class="literal">True</span> <span class="comment"># 注意，计算单个样本的时候，需要把上面对整体样本的设置注视掉，即注释掉images.requires_grad = True</span></span><br><span class="line">        model.zero_grad()</span><br><span class="line">        out = model.pre_grad(img)</span><br><span class="line">        out.backward(torch.ones_like(out)) <span class="comment"># 同上，传入Jacobian矩阵加权向量</span></span><br><span class="line">        print(np.shape(img.grad),img.grad[:,:<span class="number">5</span>])</span><br><span class="line">        img.grad = <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;官方教程-Learn-PyTorch-with-Examples&quot;&gt;&lt;a href=&quot;#官方教程-Learn-PyTorch-with-Examples&quot; class=&quot;headerlink&quot; title=&quot;官方教程 Learn PyTorch with Exam</summary>
      
    
    
    
    
    <category term="AI" scheme="https://learner0x5a.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>实用网站收集</title>
    <link href="https://learner0x5a.github.io/2021/02/07/websitecollection/"/>
    <id>https://learner0x5a.github.io/2021/02/07/websitecollection/</id>
    <published>2021-02-07T03:20:45.000Z</published>
    <updated>2021-02-07T03:27:04.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p><a href="https://www.deepl.com/translator">deepl</a></p><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><p><a href="https://magiclantern.fandom.com/wiki/IDAPython">IDA Python wiki</a><br><a href="http://www.idabook.com/">IDA Book</a></p><h1 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h1><p><a href="https://haveibeenpwned.com/">密码撞库检查</a></p><h1 id="黑苹果"><a href="#黑苹果" class="headerlink" title="黑苹果"></a>黑苹果</h1><p><a href="http://blog.daliansky.net/">黑果小兵</a></p><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><p><a href="https://godbolt.org/">Compiler Explorer</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;翻译&quot;&gt;&lt;a href=&quot;#翻译&quot; class=&quot;headerlink&quot; title=&quot;翻译&quot;&gt;&lt;/a&gt;翻译&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.deepl.com/translator&quot;&gt;deepl&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;IDA&quot;&gt;</summary>
      
    
    
    
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>以孝治国：孝与家国伦理</title>
    <link href="https://learner0x5a.github.io/2021/02/01/yxzg/"/>
    <id>https://learner0x5a.github.io/2021/02/01/yxzg/</id>
    <published>2021-02-01T14:59:47.000Z</published>
    <updated>2021-02-01T15:51:59.867Z</updated>
    
    <content type="html"><![CDATA[<p>夫孝者，善继人之志，善述人之志。 —— 《礼记·中庸》</p><h1 id="孝与孝道"><a href="#孝与孝道" class="headerlink" title="孝与孝道"></a>孝与孝道</h1><p>孝是子女对父母的自然亲情。<br>殷商时代，孝是宗教性的。以崇拜，祭祀祖先为根本目的，祈求祖先神灵庇佑。</p><p>孝道是被儒学家和统治者升华，外延，扭曲，推向极端的封建伦理道德。<br>但在中国社会中二者并未截然分开。</p><p>孝具有政治外延性。移孝为忠，报效国家和民族，不仅要孝敬老人，还要尊重长辈的意愿，实现长辈的愿望，为家族，乡里，国家争得荣誉。<br>此即成为统治思想中的孝道。</p><h1 id="儒家的孝道"><a href="#儒家的孝道" class="headerlink" title="儒家的孝道"></a>儒家的孝道</h1><p>为了维护父家长传统的等级制，孔子强调“孝悌”“亲亲尊尊”。<br>孔子将孝作为人格修养的根本，外推到亲族，社会和国家政治。<br>经由历代儒学家层层加码，孝演变成为治国的伦理工具。<br>将社会政治和家庭伦理结合，把外在的等级制度内化为每个人必须具备的伦理道德意识和自觉要求。</p><p>儒家提倡不违父母之命。谏诤不从，只得服从。“三谏而不听则号泣而随之。”<br>为了“亲亲尊尊”，采用“子为父隐”掩盖事实真相，维护尊长颜面。</p><p>孔子是儒家不是法家，在儒家这里，只有礼，没有法。</p><p>古代中国人的经世观念讲究立身扬名，不辱没祖先，否则为不孝。这一观念由《三字经》贯彻到世俗社会——“扬名声，显父母”。</p><p>汉朝开始，孝道被扭曲，强化，走向极端。“举孝廉”时期，为了博取孝子的美名，正常的孝被视为平淡，必须变本加厉，超越礼制，孝出个高水平，高难度，才能引起社会和朝廷的注意。由此形成愚孝，假孝，欺世盗名，惊世骇俗。<br><em>“生不养，死厚葬。”</em></p><p>随着孝道的强化，开始强调“树欲静而风不止，子欲养而亲不待”。个人必须放弃自身价值的实现，将“尽孝”放在首位。<br>“无违”变为“父叫子亡，子不亡不孝”，“棍棒底下出孝子”。<br>是非判断的落点归于孝：人不孝敬父母，禽兽不如，天地不容。<br>孝从人情变为了天理。</p><h1 id="佛教"><a href="#佛教" class="headerlink" title="佛教"></a>佛教</h1><p>佛教视人生为苦海，要求人们四大皆空，六根清净，了却生死，超脱世俗。<br>儒家是奋力入世的哲学，让人生价值实现在今生今世。<br>佛教是消极避世的哲学，让人生价值实现在来世，不重视今生今世的人际伦理，<em>不跪王者，不敬父母</em>。</p><h1 id="以孝齐家"><a href="#以孝齐家" class="headerlink" title="以孝齐家"></a>以孝齐家</h1><p>从先秦儒家经典到程朱理学，文人政客对家庭伦理你讲五品，我说六顺，他言七教，然后又有八德，十礼，致使家庭伦理的繁文缛节层层累积，令人目不暇接。<br>《礼记·礼运篇》提出“十义”：父慈子孝，兄良弟悌，夫义妇听，长惠幼顺，君仁臣忠。</p><p>宗法社会强调父子，兄弟，夫妇，长幼双方等家庭伦理，这些建立在道德等价交换和“平等”人格的基础上。<br>三纲五常之后，家庭伦理开始失衡。弱化君仁，父慈，夫义，强调臣忠，子孝，妇听。</p><h1 id="以孝治国"><a href="#以孝治国" class="headerlink" title="以孝治国"></a>以孝治国</h1><p>历代王朝通过“官”统治人们，美其名曰“民之父母”，把被统治者亲切地称之为“子民”，把统治者称为“父母官”。<br>被统治者需要像儿子对待父亲一样对待父母官和君父。</p><p>对君父和父母官对崇拜和拥戴，使得农民把实现和谐生活对幻想寄托在有道明君和青天大老爷身上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;夫孝者，善继人之志，善述人之志。 —— 《礼记·中庸》&lt;/p&gt;
&lt;h1 id=&quot;孝与孝道&quot;&gt;&lt;a href=&quot;#孝与孝道&quot; class=&quot;headerlink&quot; title=&quot;孝与孝道&quot;&gt;&lt;/a&gt;孝与孝道&lt;/h1&gt;&lt;p&gt;孝是子女对父母的自然亲情。&lt;br&gt;殷商时代，孝是宗教性</summary>
      
    
    
    
    
    <category term="BookReading" scheme="https://learner0x5a.github.io/tags/BookReading/"/>
    
  </entry>
  
  <entry>
    <title>IDA Linux 配置</title>
    <link href="https://learner0x5a.github.io/2021/01/18/IDALinux/"/>
    <id>https://learner0x5a.github.io/2021/01/18/IDALinux/</id>
    <published>2021-01-18T14:42:07.000Z</published>
    <updated>2021-01-25T15:33:06.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDA-Linux-Conf"><a href="#IDA-Linux-Conf" class="headerlink" title="IDA-Linux-Conf"></a>IDA-Linux-Conf</h1><p>Configure IDA pro linux version to support custom python/pip. 配置linux版IDA，支持自己的python/pip。</p><p>Tested with IDA pro 6.8 on Ubuntu 18.04 64bit.</p><h2 id="32位环境配置；32bit-enviroment"><a href="#32位环境配置；32bit-enviroment" class="headerlink" title="32位环境配置；32bit enviroment"></a>32位环境配置；32bit enviroment</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dpkg --add-architecture i386</span><br><span class="line">apt update</span><br><span class="line">apt dist-upgrade</span><br><span class="line">apt install gcc-multilib g++-multilib dialog apt-utils</span><br><span class="line">apt install lib32ncurses5 lib32z1</span><br><span class="line">apt install lib32stdc++6 build-essential libssl-dev libffi-dev python-dev libssl-dev libgcc1:i386 zlib1g:i386</span><br></pre></td></tr></table></figure><h2 id="使用自己的python-pip；Use-custom-python-pip"><a href="#使用自己的python-pip；Use-custom-python-pip" class="headerlink" title="使用自己的python/pip；Use custom python/pip"></a>使用自己的python/pip；Use custom python/pip</h2><p>linux版本的ida pro自带的python是没有binary的，只有一个libpython.so.1.0，没有pip，不能安装第三方的模块比如capstone。</p><p>网上的解决方法（Solutions from internet）：</p><ul><li><p>没看懂的操作，但对现有方法做了<a href="https://duksctf.github.io/2017/03/15/Make-IDA-Pro-Great-Again.html">汇总</a>；A summary</p></li><li><p><a href="https://github.com/zardus/idalink">idalink</a>：看起来很好用，但要求ida版本&gt;7.0；Require IDA version &gt; 7.0</p></li></ul><ul><li><p><a href="https://pythonhosted.org/arybo/integration.html">Arybo</a>：用rpc重定向至64位的python；Redirect to 64bit python with rpc</p></li><li><p>官方<a href="https://www.hex-rays.com/blog/installing-pip-packages-and-using-them-from-ida-on-a-64-bit-machine/">博客</a>：太老了；Official solution, maybe too old.</p></li></ul><h3 id="编译一个32位的python2-7；Compile-a-32-bit-python2-7"><a href="#编译一个32位的python2-7；Compile-a-32-bit-python2-7" class="headerlink" title="编译一个32位的python2.7；Compile a 32-bit python2.7"></a>编译一个32位的python2.7；Compile a 32-bit python2.7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt install zlib1g-dev:i386 libsqlite3-dev:i386 libssl-dev:i386 libreadline-dev:i386 libncurses5-dev:i386 libffi-dev:i386 libbz2-dev:i386 libgcc1:i386 zlib1g:i386 libc6-dev-i386</span><br><span class="line">wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tar.xz</span><br><span class="line">tar xvf Python-2.7.18.tar.xz</span><br><span class="line"><span class="built_in">cd</span> Python-2.7.18</span><br><span class="line">CFLAGS=-m32 LDFLAGS=-m32 ./configure --prefix=/path/to/python27-32 --with-system-ffi --with-ensurepip=install</span><br><span class="line">make -j24</span><br></pre></td></tr></table></figure><p>可能有部分模块不能编译；There can be some modules that cannot be built</p><p>没有Failed to build these modules即可。But we only need to make sure there’s no compilation failure, i.e. Failed to build these modules.</p><p>Finally, <code>make install</code></p><h3 id="使用编译得到的pip安装想要的包；Use-compiled-python-pip-to-install-whatever-you-want"><a href="#使用编译得到的pip安装想要的包；Use-compiled-python-pip-to-install-whatever-you-want" class="headerlink" title="使用编译得到的pip安装想要的包；Use compiled python-pip to install whatever you want"></a>使用编译得到的pip安装想要的包；Use compiled python-pip to install whatever you want</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CFLAGS=-m32</span><br><span class="line"><span class="built_in">export</span> LDFLAGS=-m32</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/lib/i386-linux-gnu/:/usr/lib32:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">/path/to/python27-32/bin/pip install &lt;package&gt;</span><br></pre></td></tr></table></figure><h3 id="使用安装的包；Use-installed-packages"><a href="#使用安装的包；Use-installed-packages" class="headerlink" title="使用安装的包；Use installed packages"></a>使用安装的包；Use installed packages</h3><p>在你脚本里添加；In your python script, add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">&quot;/path/to/python27-32/lib/python2.7/site-packages&quot;</span>) </span><br><span class="line">sys.path.append(<span class="string">&quot;/path/to/python27-32&quot;</span>) </span><br><span class="line">sys.path.append(<span class="string">&quot;/path/to/python27-32&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Bug-code-for-hash-md5-was-not-found"><a href="#Bug-code-for-hash-md5-was-not-found" class="headerlink" title="Bug: code for hash md5 was not found"></a>Bug: code for hash md5 was not found</h2><p>ldd查看IDA PRO自带的Python2.7 lib中_hashlib.so，提示缺少libssl.so.0.9.8 libcrypto.so.0.9.8 libpython2.7.so.1.0。</p><p>其中libpython2.7.so.1.0在IDA PRO安装目录下，将其拷贝至对应库目录下即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;path&#x2F;to&#x2F;ida&#x2F;libpython2.7.so.1.0 &#x2F;path&#x2F;to&#x2F;ida&#x2F;python&#x2F;lib&#x2F;python2.7&#x2F;lib-dynload&#x2F;</span><br></pre></td></tr></table></figure><p>IDA PRO 6.8自带的python2.7要求openssl版本为32bit 0.9.8，并且openssl1.0.0和0.9.8不兼容，所以不能通过创建软链接的方式解决，需要安装openssl0.9.8版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/universe/o/openssl098/libssl0.9.8_0.9.8o-7ubuntu3.2_i386.deb</span></span><br><span class="line">wget http://snapshot.debian.org/archive/debian/20110406T213352Z/pool/main/o/openssl098/libssl0.9.8_0.9.8o-7_i386.deb</span><br><span class="line">dpkg -i install libssl0.9.8_0.9.8o-7_i386.deb</span><br></pre></td></tr></table></figure><h2 id="Bug-TVision-error-Can-not-load-libcurses-so-Without-libcurses-can-work-only-with-xterm-linux"><a href="#Bug-TVision-error-Can-not-load-libcurses-so-Without-libcurses-can-work-only-with-xterm-linux" class="headerlink" title="Bug: TVision error: Can not load libcurses.so Without libcurses can work only with xterm/linux"></a>Bug: TVision error: Can not load libcurses.so Without libcurses can work only with xterm/linux</h2><p>设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TERM=xterm</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDA-Linux-Conf&quot;&gt;&lt;a href=&quot;#IDA-Linux-Conf&quot; class=&quot;headerlink&quot; title=&quot;IDA-Linux-Conf&quot;&gt;&lt;/a&gt;IDA-Linux-Conf&lt;/h1&gt;&lt;p&gt;Configure IDA pro linu</summary>
      
    
    
    
    
    <category term="Security" scheme="https://learner0x5a.github.io/tags/Security/"/>
    
    <category term="Tools" scheme="https://learner0x5a.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>监视资本主义:智能陷阱</title>
    <link href="https://learner0x5a.github.io/2021/01/11/Social-Dilemma/"/>
    <id>https://learner0x5a.github.io/2021/01/11/Social-Dilemma/</id>
    <published>2021-01-11T07:05:17.000Z</published>
    <updated>2021-01-11T07:08:10.424Z</updated>
    
    <content type="html"><![CDATA[<p>网飞纪录片： Social Dilemma</p><h1 id="社交媒体的正反馈"><a href="#社交媒体的正反馈" class="headerlink" title="社交媒体的正反馈"></a>社交媒体的正反馈</h1><p>每次上/下拉刷新都是新东西。你不知道什么时候能刷到自己喜欢的东西，也不知道自己能刷到什么，就像老虎机一样。<br>如今注意力经济中的这种劝服性设计在人脑中植入无意识的习惯，对人进行重编程。你的判断力，对自我价值和身份的认知都在被重新编程。<br>在意别人的看法是必要的，但我们需要在意互联网上的10000个人的看法吗？我们真的需要每隔五分钟获得一次社交认可吗？<br>我们通过获得的满足感来管理自己的生活，每次点赞、爱心、大拇指这些信号给我们短期积极的反馈。所以社交媒体将这些和价值融合，和真相融合，后果是显而易见的。<br>而个人在一次次短期反馈之后，就会想“我接下来要做什么，我还想要这种感觉”，这就是恶性循环。</p><p>设计者会想方设法占用人的时间，比如消息提醒不交代清楚什么信息，“对方正在输入…”让你保持等待。而随着AI的发展，这些设计已经不是人类在做，而是算法在做。</p><p>社交媒体不是纯粹的工具，社交媒体有其目的：占用你的时间，以从广告商、政客等处收费盈利，而其采用的手段则是利用你的心理对付你自己。</p><p>楚门为什么没有发现所在世界的真实本质？因为我们接受了呈现在我们面前的世界就是现实。</p><p>我们创造了一个虚假消息的体系，虚假信息比真实信息更能让公司盈利，因为真相是无聊的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网飞纪录片： Social Dilemma&lt;/p&gt;
&lt;h1 id=&quot;社交媒体的正反馈&quot;&gt;&lt;a href=&quot;#社交媒体的正反馈&quot; class=&quot;headerlink&quot; title=&quot;社交媒体的正反馈&quot;&gt;&lt;/a&gt;社交媒体的正反馈&lt;/h1&gt;&lt;p&gt;每次上/下拉刷新都是新东西。你不知</summary>
      
    
    
    
    
    <category term="others" scheme="https://learner0x5a.github.io/tags/others/"/>
    
  </entry>
  
</feed>
